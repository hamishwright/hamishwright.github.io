{"version":3,"sources":["SetWordCounter.js","OverallProgress.js","PrizeRow.js","App.js","serviceWorker.js","index.js"],"names":["SetWordCounter","props","state","isSelected","emojiCode","Math","floor","random","this","totalWordsCompleted","toggleActive","setNumber","setState","isActive","remaining","emoji","role","aria-label","total","onClick","handleClick","className","getBorderColor","getEmoji","React","Component","ProgressBar","index","boxes","push","key","getSquareBGClass","OverallProgress","numBoxes","displayWordsCompleted","isShowingPrize","totalWords","getSquareBorderClass","PrizeRow","prizeBoxId","getIsPrizeBoxCompleted","isCompleted","emojiPrizes","PrizeBox","code","dangerouslySetInnerHTML","__html","App","emojiLibrary","splice","length","setWordsList","activeSets","randomWord","randomSetNumber","slice","indexOf","randomSet","randomWordNumber","shouldShowPrize","console","log","setWordCounters","element","bind","setWordCounters2","nextButton","btnText","shuffle","getEmoji2","getInstructions","getDisplayWord","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1a626c0.chunk.js","sourcesContent":["import React from 'react';\n\nclass SetWordCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        let min = 128000;\n        let max = 128060;\n\n        this.state = {\n            isSelected: true,\n            emojiCode: Math.floor(Math.random() * (max - min + 1)) + min\n        }\n    }\n\n    handleClick() {\n        if (this.props.totalWordsCompleted > 0) {\n            return;\n        }\n        let isSelected = !this.state.isSelected;\n        this.props.toggleActive(this.props.setNumber, isSelected);\n\n        this.setState({ isSelected: isSelected });\n    }\n\n    getBorderColor() {\n        return (this.props.isActive ? ' border-success ' : ' ');\n    }\n\n    isComplete() {\n        return (this.props.remaining === 0 && !this.props.isActive);\n    }\n\n    getEmoji() {\n        let emoji = <span role=\"img\" aria-label=\"emoji\">&#128683;</span>;\n\n        if (this.state.isSelected) {\n            emoji = <span role=\"img\" aria-label=\"emoji\">&#11088;</span>;\n        }\n\n        return (emoji);\n    }\n\n    render() {\n        const total = this.props.setNumber === 8 ? 12 : 10;\n        return (\n            <div\n                onClick={() => this.handleClick()}\n                className={\n                    \" setWordsBox col p-1 \"\n                    + this.getBorderColor()\n                }>\n                <div>\n                    <span className={\n                        (this.state.isSelected ? '' : ' text-muted ')\n                    }>{this.getEmoji()} Set {this.props.setNumber + 1}</span>\n                </div>\n                <div>\n                    <ProgressBar total={total} remaining={this.props.remaining} isActive={this.props.isActive} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ProgressBar extends React.Component {\n    getSquareBGClass(index) {\n        let className = '';\n\n        if (index < this.props.total - this.props.remaining) {\n            className = ' bg-success ';\n        }\n\n        if (this.props.isActive && index === this.props.total - this.props.remaining - 1) {\n            className = ' border-success border-right border-left ';\n        }\n\n        return className;\n    }\n\n    render() {\n        let boxes = [];\n        for (let index = 0; index < this.props.total; index++) {\n            boxes.push(<div key={index} className={\n                \"border-left border-top border-bottom flex-grow-1 \"\n                + this.getSquareBGClass(index)\n                + (index === this.props.total - 1 && ' border-right ')\n            }>&nbsp;</div>);\n        }\n\n        return (\n            <div className=\"d-flex justify-content-center progressBar\">\n                {boxes}\n            </div>\n        );\n    }\n}\n\nexport default SetWordCounter;","import React from 'react';\n\nclass OverallProgress extends React.Component {\n    getSquareBGClass(index, numBoxes) {\n        let className = '';\n        let displayWordsCompleted = this.props.totalWordsCompleted < 1 ? 0 : this.props.totalWordsCompleted - 1;\n\n\n        if (index < displayWordsCompleted % 10 || (displayWordsCompleted % 10 === 0 && this.props.isShowingPrize)) {\n            className = ' bg-success ';\n        }\n\n        if (displayWordsCompleted === 0) {\n            className = '';\n        }\n\n        if (this.props.totalWords - displayWordsCompleted < 12 && this.props.totalWords % 10 !== 0) {\n            className = '';\n            let remaining = this.props.totalWords - displayWordsCompleted;\n            let distanceFromEnd = 12 - index;\n            if (distanceFromEnd > remaining) {\n                className = ' bg-success ';\n            }\n        }\n\n        if (this.props.totalWords - displayWordsCompleted < 1) {\n            className = ' bg-success ';\n        }\n\n        return className;\n    }\n\n    getSquareBorderClass(index, numBoxes) {\n        let className = '';\n        let displayWordsCompleted = this.props.totalWordsCompleted < 1 ? 0 : this.props.totalWordsCompleted - 1;\n\n        if (index === displayWordsCompleted % numBoxes) {\n            className = ' border-success ';\n        }\n\n        if (this.props.totalWords - displayWordsCompleted < 12 && this.props.totalWords % 10 !== 0) {\n            className = '';\n            let remaining = this.props.totalWords - displayWordsCompleted;\n            let distanceFromEnd = 12 - index;\n            if (distanceFromEnd === remaining) {\n                className = ' border-success ';\n            }\n        }\n\n        if (this.props.isShowingPrize || this.props.totalWordsCompleted === 0) {\n            className = '';\n        }\n\n        if (this.props.totalWords - displayWordsCompleted < 1) {\n            className = ' ';\n        }\n        \n        return className;\n    }\n\n    render() {\n        let displayWordsCompleted = this.props.totalWordsCompleted < 1 ? 0 : this.props.totalWordsCompleted - 1;\n\n        let boxes = [];\n        let numBoxes = 10;\n\n        if (this.props.totalWords - displayWordsCompleted < 12 && this.props.totalWords % 10 !== 0) {\n            numBoxes = 12;\n        }\n\n        if (this.props.totalWords === 12) {\n            numBoxes = 12;\n        }\n\n        for (let index = 0; index < numBoxes; index++) {\n            boxes.push(<div key={index} className={\n                \"border flex-grow-1 \"\n                + this.getSquareBGClass(index, numBoxes)\n                + this.getSquareBorderClass(index, numBoxes)\n            }>&nbsp;</div>);\n        }\n\n        return (\n            <div className=\"col p-1 overallProgress\">\n                <div className=\"d-flex justify-content-center\">\n                    {boxes}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default OverallProgress;","import React from 'react';\n\nclass PrizeRow extends React.Component {\n\n    getIsPrizeBoxCompleted(prizeBoxId) {\n        let displayWordsCompleted = this.props.totalWordsCompleted < 1 ? 0 : this.props.totalWordsCompleted - 1;\n\n        if (displayWordsCompleted === this.props.totalWords) {\n            return true;\n        }\n\n        let numPrizeBoxes = Math.floor(this.props.totalWords / 10);\n        if (prizeBoxId === numPrizeBoxes - 1) {\n            return false;\n        }\n\n        return (Math.floor(displayWordsCompleted / 10) > prizeBoxId);\n    }\n\n    getBorderColor(prizeBoxId) {\n        return (this.getIsPrizeBoxCompleted(prizeBoxId) ? ' border-warning ' : ' bg-success ');\n    }\n\n    render() {\n        let boxes = [];\n        let prizeBoxId = 0;\n        for (let index = 0; index < Math.floor(this.props.totalWords / 10); index++) {\n            boxes.push(<div key={index} className={\n                \" border  mx-sm-2 rounded-lg growers \"\n                + this.getBorderColor(prizeBoxId)\n            }><PrizeBox isCompleted={this.getIsPrizeBoxCompleted(prizeBoxId)} emojiCode={this.props.emojiPrizes[index]} /></div>);\n            prizeBoxId++;\n        }\n\n        return (\n            <div className=\"col p-0\">\n                <div className=\"d-flex justify-content-center\">\n                    {boxes}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass PrizeBox extends React.Component {\n    getEmoji() {\n        let emoji = <span className=\"text-light\" role=\"img\" aria-label=\"emoji\">?</span>;\n        // let emoji = <span role=\"img\" aria-label=\"emoji\">&#128274;</span>; // Lock\n        // let emoji = <span role=\"img\" aria-label=\"emoji\">&#10068;</span>; // Question mark\n\n        if (this.props.isCompleted) {\n            emoji = <span code={this.props.emojiCode} role=\"img\" aria-label=\"emoji\" dangerouslySetInnerHTML={{ __html: '&#' + this.props.emojiCode + ';' }} />;\n        }\n\n        return (emoji);\n    }\n\n    render() {\n        return (\n            <div className=\"prizeEmoji\">\n                {this.getEmoji()}\n            </div>\n        );\n    }\n}\n\nexport default PrizeRow;","import React from 'react';\nimport './App.css';\nimport SetWordCounter from './SetWordCounter.js';\nimport OverallProgress from './OverallProgress.js';\nimport PrizeRow from './PrizeRow.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let emojiLibrary = [];\n        for (let index = 128000; index <= 128060; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 129408; index <= 129425; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 127812; index <= 127829; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 127846; index <= 127853; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 127871; index <= 127877; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 127927; index <= 127931; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 127949; index <= 127955; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 128640; index <= 128642; index++) {\n            emojiLibrary.push(index);\n        }\n\n        for (let index = 128657; index <= 128659; index++) {\n            emojiLibrary.push(index);\n        }\n\n        emojiLibrary.push(\n            127984,\n            127968,\n            128063,\n            128081,\n            128132,\n            128241,\n            128250,\n            127906,\n            127908,\n            127909,\n            127912,\n            127911,\n            129373,\n            129365,\n            129361,\n            129360,\n            129302,\n            128756,\n            128526,\n            128374,\n            128300,\n            128301,\n            128248,\n            128141,\n            128142,\n            127936,\n            127934,\n            129472,\n            9748,\n            9875,\n            9917,\n            9924,\n            9973,\n            9975,\n            127752,\n            127757,\n            127789,\n            127790,\n            127797,\n            127798,\n            127799,\n            127804,\n            127880,\n            127891,\n            127894,\n            127904,\n            127918,\n        );\n\n        let emojiPrizes = [];\n        for (let index = 0; index < 10; index++) {\n            emojiPrizes.push(emojiLibrary.splice(Math.floor(Math.random() * emojiLibrary.length), 1));\n        }\n\n        this.state = {\n            setWordsList: [\n                ['I', 'a', 'the', 'to', 'at', 'it', 'is', 'in', 'on', 'as'],\n                ['an', 'be', 'he', 'she', 'we', 'me', 'up', 'us', 'my', 'go'],\n                ['and', 'be', 'can', 'for', 'get', 'got', 'had', 'her', 'him', 'of'],\n                ['no', 'so', 'do', 'too', 'see', 'not', 'said', 'or', 'its', 'was'],\n                ['back', 'with', 'his', 'big', 'mum', 'dad', 'went', 'will', 'like', 'you'],\n                ['than', 'that', 'their', 'them', 'then', 'there', 'they', 'this', 'came', 'come'],\n                ['but', 'all', 'out', 'day', 'put', 'off', 'now', 'way', 'good', 'look'],\n                ['if', 'into', 'how', 'down', 'from', 'new', 'made', 'make', 'take', 'are'],\n                ['give', 'have', 'here', 'old', 'our', 'saw', 'say', 'want', 'well', 'what', 'when', 'who'],\n                ['your', 'first', 'use', 'some', 'more', 'also', 'any', 'one', 'two', 'were']\n            ],\n            activeSets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n            randomWord: \"Ready?\",\n            randomSetNumber: -1,\n            totalWords: 102,\n            totalWordsCompleted: 0,\n            isShowingPrize: false,\n            emojiPrizes: emojiPrizes,\n            emojiLibrary: emojiLibrary\n        }\n    }\n\n    toggleActive(setNumber, isSelected) {\n        let activeSets = this.state.activeSets.slice();\n        if (isSelected) {\n            activeSets.push(setNumber);\n        } else {\n            let index = activeSets.indexOf(setNumber);\n            if (index !== -1) {\n                activeSets.splice(index, 1);\n            }\n        }\n\n        let totalWords = activeSets.length * 10;\n        if (activeSets.indexOf(8) !== -1) {\n            totalWords += 2;\n        }\n\n        this.setState({ activeSets: activeSets, totalWords: totalWords });\n    }\n\n    shouldShowPrize() {\n        let displayWordsCompleted = this.state.totalWordsCompleted < 1 ? 0 : this.state.totalWordsCompleted - 1;\n\n        if (this.state.totalWords - displayWordsCompleted < 12 && this.state.totalWords % 10 !== 0) {\n            return (this.state.totalWordsCompleted === this.totalWords - 1);\n        }\n\n        return ((this.state.totalWordsCompleted) % 10 === 0 && this.state.totalWordsCompleted > 0)\n    }\n\n    shuffle() {\n        let setWordsList = this.state.setWordsList.slice();\n        let activeSets = this.state.activeSets.slice();\n\n        if (activeSets.length === 0 && this.state.isShowingPrize) {\n            this.setState({ randomWord: 'All Done!', randomSetNumber: -2, isShowingPrize: false });\n            return;\n        }\n\n        if (activeSets.length === 0) {\n            this.setState({ isShowingPrize: true, totalWordsCompleted: this.state.totalWordsCompleted + 1, randomSetNumber: -3 });\n            return;\n        }\n\n        if (this.state.isShowingPrize) {\n            this.setState({ isShowingPrize: false });\n            return;\n        }\n\n        const randomSetNumber = activeSets[Math.floor(Math.random() * activeSets.length)];\n        let randomSet = this.state.setWordsList[randomSetNumber];\n        const randomWordNumber = Math.floor(Math.random() * randomSet.length)\n        let randomWord = randomSet.splice(randomWordNumber, 1);\n\n        setWordsList[randomSetNumber] = randomSet;\n\n        if (randomSet.length === 0) {\n            // removed randomSet from activeSets\n            let index = activeSets.indexOf(randomSetNumber);\n            if (index !== -1) {\n                activeSets.splice(index, 1);\n            }\n        }\n\n        this.setState({\n            setWordsList: setWordsList,\n            randomWord: randomWord,\n            randomSetNumber: randomSetNumber,\n            activeSets: activeSets,\n            totalWordsCompleted: this.state.totalWordsCompleted + 1\n        });\n\n        if (this.shouldShowPrize()) {\n            this.setState({ isShowingPrize: true });\n        }\n    }\n\n    getEmoji() {\n        let emoji = '';\n        if (this.state.randomSetNumber === -2) {\n            emoji = <span role=\"img\" aria-label=\"emoji\">&#127881;</span>;\n        }\n        return (emoji);\n    }\n\n    getEmoji2() {\n        let emoji = '';\n        if (this.state.randomSetNumber === -2) {\n            emoji = <span role=\"img\" aria-label=\"emoji\">&#128540;</span>;\n        }\n        return (emoji);\n    }\n\n    getInstructions() {\n        if (this.state.totalWordsCompleted < 1) {\n            return <div className=\"h5\">Select your Sets</div>\n        }\n    }\n\n    getDisplayWord() {\n        console.log(Math.floor((this.state.totalWordsCompleted - 4) / 10));\n        console.log(this.state.totalWordsCompleted);\n        if (this.state.isShowingPrize) {\n            let emojiCode = this.state.emojiPrizes[Math.floor((this.state.totalWordsCompleted - 4) / 10)];\n            return (\n                <span className=\"bg-light border border-warning rounded-lg px-4 py-5\" role=\"img\" aria-label=\"emoji\" dangerouslySetInnerHTML={{ __html: '&#' + emojiCode + ';' }} />\n            );\n        }\n\n        return this.state.randomWord;\n    }\n\n    render() {\n        const setWordCounters = [];\n        for (let index = 0; index < this.state.setWordsList.length / 2; index++) {\n            const element = this.state.setWordsList[index];\n            let isActive = (index === this.state.randomSetNumber);\n            setWordCounters.push(<SetWordCounter key={index} setNumber={index} remaining={element.length} isActive={isActive} toggleActive={this.toggleActive.bind(this)} totalWordsCompleted={this.state.totalWordsCompleted} />);\n        }\n        const setWordCounters2 = [];\n        for (let index = this.state.setWordsList.length / 2; index < this.state.setWordsList.length; index++) {\n            const element = this.state.setWordsList[index];\n            let isActive = (index === this.state.randomSetNumber);\n            setWordCounters2.push(<SetWordCounter key={index} setNumber={index} remaining={element.length} isActive={isActive} toggleActive={this.toggleActive.bind(this)} totalWordsCompleted={this.state.totalWordsCompleted} />);\n        }\n\n        let nextButton = '';\n        if (this.state.randomSetNumber !== -2 && this.state.totalWords > 0) {\n            const btnText = this.state.randomSetNumber === -1 ? 'Start' : 'Next';\n            nextButton = <button className=\"btn btn-lg btn-outline-light mt-5 py-3 px-5\" onClick={() => this.shuffle()}>{btnText}</button>\n        }\n\n        return (\n            <div className=\"container-fluid text-center vh-100 bg-success\">\n                <div className=\"row h-100\">\n                    <div className=\"col\">\n                        <div className=\"h-100 d-flex flex-column\">\n                            <div className=\"row justify-content-center bg-light\">\n                                {setWordCounters}\n                            </div>\n                            <div className=\"row justify-content-center bg-light\">\n                                {setWordCounters2}\n                            </div>\n                            <div className=\"row justify-content-center bg-light\">\n                                <PrizeRow totalWords={this.state.totalWords} totalWordsCompleted={this.state.totalWordsCompleted} activeSets={this.state.activeSets} emojiPrizes={this.state.emojiPrizes} />\n                            </div>\n                            {<div className=\"row justify-content-center bg-light\">\n                                <OverallProgress totalWords={this.state.totalWords} totalWordsCompleted={this.state.totalWordsCompleted} isShowingPrize={this.state.isShowingPrize} />\n                            </div>}\n\n                            <div className=\"row flex-grow-1\">\n                                <div className=\"col\">\n                                    <div className=\"d-flex align-items-center justify-content-center flex-grow h-100\">\n                                        <div className=\"setWord\" >\n                                            <div className=\"display-4 d-md-none\">{this.getEmoji()} {this.getEmoji2()} {this.getEmoji()}</div>\n                                            <div className=\"display-1 d-none d-md-block\">{this.getEmoji()} {this.getEmoji2()} {this.getEmoji()}</div>\n                                            {this.getInstructions()}\n                                            <h1 className=\"display-1\">{this.getDisplayWord()}</h1>\n                                            <div className=\"display-1 d-none d-md-block\">{this.getEmoji()} {this.getEmoji2()} {this.getEmoji()}</div>\n                                            <div className=\"display-4 d-md-none\">{this.getEmoji()} {this.getEmoji2()} {this.getEmoji()}</div>\n                                            {nextButton}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}